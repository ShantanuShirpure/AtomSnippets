# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
{
  '.source.js':
    'React Redux mapStateToProps':
      prefix: 'rrmstp'
      body: '''
      const mapStateToProps = ( state ) => {
        return {
          ${1}
        };
      };
      '''

    'React Redux: mapDispatchToProps':
      prefix: 'rrmdtp'
      body: '''
      const mapDispatchToProps = ( dispatch ) => {
        return {
          ${1}
        };
      };
      '''

    'React Redux Simple mapStateToProps':
      prefix: 'rrmstp'
      body: '''
      const mapStateToProps = ( state ) => ( {
        ${1}
      } ) ;
      '''

    'React Redux Simple mapDispatchToProps':
      prefix: 'rrmdtp'
      body: '''
      const mapDispatchToProps = ( dispatch ) => ( {
        ${1}
      } );
      '''

    'React Redux Component':
      prefix: 'rrc'
      body: '''
      import React, { PropTypes } from 'react';
      import { connect } from 'react-redux';
      class ${1} extends React.Component {
        static propTypes = {
        };
        render () {
          return;
        }
      }
      const mapStateToProps = ( state ) => {
        return {
        };
      };
      const mapDispatchToProps = ( dispatch ) => {
        return {
        };
      };
      export default connect( mapStateToProps, mapDispatchToProps )( ${1} );
      '''

    'React Redux Stateful Component':
      prefix: 'rrsc'
      body: '''
      import React, { PropTypes } from 'react';
      import { connect } from 'react-redux';
      class ${1} extends React.Component {
        static propTypes = {
        };
        constructor ( props ) {
          super( props );
          this.state = {
          };
        }
        render () {
          return;
        }
      }
      const mapStateToProps = ( state ) => {
        return {
        };
      };
      const mapDispatchToProps = ( dispatch ) => {
        return {
        };
      };
      export default connect( mapStateToProps, mapDispatchToProps )( ${1} );
      '''

    'React Redux Simplified Dispatch':
      prefix: 'rrsd'
      body: '''
      import React from 'react';
      import PropTypes from 'prop-types';
      import { bindActionCreators } from 'redux';
      import { connect } from 'react-redux';
      import { Creators } from '${2}'
      class ${1} extends React.Component {
        static propTypes = {
        };
        constructor ( props ) {
          super( props );
          this.state = {
          };
        }
        render () {
          return;
        }
      }
      export default connect(
        ( state ) => ( {
        } ),
        ( dispatch ) => bindActionCreators( Creators, dispatch )
      )( ${1} );
      '''

    'React Component':
      prefix: 'rc'
      body: '''
      import React, { PropTypes } from 'react';
      export default class ${1} extends React.Component {
        static propTypes = {
        };
        render () {
          return;
        }
      }
      '''
}